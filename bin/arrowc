#!/usr/bin/env python
# -*- coding: utf-8 -*-
from arrowc.arrowlang_il.il_generator import ILGenerator
from arrowc.arrowlang_il.il_types import json_convert

import os
import sys
import getopt
import json
from subprocess import call, Popen, PIPE

from arrowc.arrowlang_parser import ArrowParser
from arrowc.arrowlang_typechecker import ArrowTypechecker, TypecheckError

from arrowc.x86_gen.x86_generator import gen_x86

usage_message = 'Usage: arrowc [option] -o [output] [input...]'

extended_message = '''
Options
    -h, --help                          print this message
    -A, --ast                           stop at the AST
    -o, --output=<path>                 output path. If the -o flag is not given or blank, output is written to stdout
    -T, typed-ast                       stop at type checked AST

    **Not yet implemented**
    -I, intermediate                    stop at intermediate code generation
    -J, json-il                         like -I, but generate json
    -S, assembly                        stop at assembly generation

'''


def log(*msgs):
    """log messages to stderr"""
    for msg in msgs:
        print >>sys.stderr, msg,
    print >>sys.stderr
    sys.stderr.flush()


def usage(code=None):
    """Prints the usage and exits with an error code specified by code. If code
    is not given it exits with error_codes['usage']"""
    log(usage_message)
    if code is None:
        log(extended_message)
        code = 1
    sys.exit(code)


def main(argv):

    short_opts = 'ho:ATIJS'
    long_opts = [
        'help', 'output=', 'ast', 'typed-ast', 'intermediate', 'json-il', "assembly"
    ]

    try:
        opts, args = getopt.getopt(argv, short_opts, long_opts)
    except getopt.GetoptError, err:
        log(err)
        usage(1)

    output = None
    ast = False
    typecheck = False
    il = False
    json_ = False
    asm = False
    inputs = args
    if not inputs:
        log("You must supply some inputs")
        usage(1)

    for opt, arg in opts:
        if opt in ('-h', '--help',):
            usage()
        elif opt in ('-o', '--output',):
            output = arg
        elif opt in ('-A', '--ast'):
            ast = True
            # print_ast(inputs, output)
        elif opt in ('-T', '--typed-ast'):
            typecheck = True
            # print_typed_ast(inputs, output)
        elif opt in ("-I", '--intermediate'):
            il = True
        elif opt in ("-J", '--json-il'):
            json_ = True
        elif opt in ("-S", "--assembly"):
            asm = True
        else:
            log("Unkown option", opt)
            usage(1)

    if ast:
        print_ast(inputs, output)
    elif typecheck:
        print_typed_ast(inputs, output)
    elif json_:
        print_json(inputs, output)
    elif il:
        print_il(inputs, output)
    elif asm:
        print_x86(inputs, output)
    else:
        output_binary(inputs, output)

# yes these are all very duplicated, I haven't had the chance to fix them yet

def print_ast(inputs, output):
    ast = ""
    for input_name in inputs:
        try:
            with open(input_name, 'r') as input_file:
                program = input_file.read()
                try:
                    #al_parser = ArrowParser()
                    ast += str(ArrowParser().parse(program)) + '\n'

                except SyntaxError, e:
                    log("Error parsing %s: %s" % (input_name, e))
                    sys.exit(1)
        except IOError:
            log("Error reading file: " + input_name)
            sys.exit(1)

    if output and output != "":
        with open(output, 'w') as out:
            out.write(ast)
    else:
        sys.stdout.write(ast)


def print_typed_ast(inputs, output):
    typed_ast = ""
    for input_name in inputs:
        try:
            with open(input_name, 'r') as input_file:
                program = input_file.read()
                try:
                    ast = ArrowParser().parse(program)
                    typed_ast += str(ArrowTypechecker(ast).typecheck()) + '\n'
                except SyntaxError, e:
                    log("Error in %s: %s" % (input_name, e))
                    sys.exit(1)
                except TypecheckError, e:
                    log("Error typing %s: \n%s" % (input_name, e))
                    sys.exit(1)
        except IOError:
            log("Error reading file: " + input_name)
            sys.exit(1)

    if output and output != "":
        with open(output, 'w') as out:
            out.write(typed_ast)
    else:
        sys.stdout.write(typed_ast)

def print_json(inp, outp):
    json_str = ""
    for input_name in inp:
        try:
            with open(input_name, 'r') as input_file:
                program = input_file.read()
                try:
                    ast = ArrowParser().parse(program)
                    typed_ast = ArrowTypechecker(ast).typecheck()
                    json_str += ILGenerator(typed_ast).get_json() + "\n"
                    # json_str += json.dumps(prog, default=json_convert) + "\n"
                except SyntaxError, e:
                    log("Error in %s: %s" % (input_name, e))
                    sys.exit(1)
                except TypecheckError, e:
                    log("Error typing %s: \n%s" % (input_name, e))
                    sys.exit(1)
        except IOError:
            log("Error reading file: " + input_name)
            sys.exit(1)

    if outp and outp != "":
        with open(outp, 'w') as out:
            out.write(json_str)
    else:
        sys.stdout.write(json_str)

def print_il(inp, outp):
    il_str = ""
    for input_name in inp:
        try:
            with open(input_name, 'r') as input_file:
                program = input_file.read()
                try:
                    ast = ArrowParser().parse(program)
                    typed_ast = ArrowTypechecker(ast).typecheck()
                    il_str += ILGenerator(typed_ast).get_prettyprint() + "\n"
                except SyntaxError, e:
                    log("Error in %s: %s" % (input_name, e))
                    sys.exit(1)
                except TypecheckError, e:
                    log("Error typing %s: \n%s" % (input_name, e))
                    sys.exit(1)
        except IOError:
            log("Error reading file: " + input_name)
            sys.exit(1)

    if outp and outp != "":
        with open(outp, 'w') as out:
            out.write(il_str)
    else:
        sys.stdout.write(il_str)

def print_x86(inp, outp):
    asm_str = ""
    for input_name in inp:
        try:
            with open(input_name, "r") as input_file:
                src = input_file.read()
                try:
                    ast = ArrowParser().parse(src)
                    typed_ast = ArrowTypechecker(ast).typecheck()
                    il_prog = ILGenerator(typed_ast).program
                    asm_str += gen_x86(il_prog)
                except SyntaxError, e:
                    log("Error in %s: %s" % (input_name, e))
                    sys.exit(1)
                except TypecheckError, e:
                    log("Error typing %s: \n%s" % (input_name, e))
                    sys.exit(1)
                except IOError, e:
                    log("Problem reading std lib file: {}".format(e.message))
        except IOError:
            log("Error reading file: {}".format(input_name))
            sys.exit(1)

    if outp and outp != "":
        with open(outp, 'w') as out:
            out.write(asm_str)
    else:
        sys.stdout.write(asm_str)

def output_binary(inp, outp):
    asm_str = ""
    for input_name in inp:
        try:
            with open(input_name, "r") as input_file:
                src = input_file.read()
                try:
                    ast = ArrowParser().parse(src)
                    typed_ast = ArrowTypechecker(ast).typecheck()
                    il_prog = ILGenerator(typed_ast).program
                    asm_str += gen_x86(il_prog)

                except SyntaxError, e:
                    log("Error in %s: %s" % (input_name, e))
                    sys.exit(1)
                except TypecheckError, e:
                    log("Error typing %s: \n%s" % (input_name, e))
                    sys.exit(1)
                except IOError, e:
                    log("Problem reading std lib file: {}".format(e.message))
        except IOError:
            log("Error reading file: {}".format(input_name))
            sys.exit(1)

    if outp and outp != "":
        p = Popen(["gcc", "-m32", "-x", "assembler", "-o", outp, "-"], stdin=PIPE)
        p.communicate(input=asm_str)
    else:
        log("Must supply an output file")
        sys.exit(1)















if __name__ == "__main__":
    main(sys.argv[1:])
