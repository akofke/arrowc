#!/usr/bin/env python
# -*- coding: utf-8 -*-


import os
import sys
import getopt

from pr03.arrowlang_lexer import ArrowLexer
from pr03.arrowlang_parser import ArrowParser

usage_message = 'Usage: pr03 -A -o [output] [input...]'

extended_message = '''
Put a description of your program, pr03, here

Example

    Put some examples of how to use your program here

Options
    -h, --help                          print this message
    -A, --ast                           stop at the AST
    -o, --output=<path>                 output path

    **Not yet implemented**
    -T, typed-ast                       stop at type checked AST
    -I, intermediate                    stop at intermediate code generation
    -J, json-il                         like -I, but generate json
    -S, assembly                        stop at assembly generation

'''


def log(*msgs):
    '''log messages to stderr'''
    for msg in msgs:
        print >>sys.stderr, msg,
    print >>sys.stderr
    sys.stderr.flush()


def usage(code=None):
    '''Prints the usage and exits with an error code specified by code. If code
    is not given it exits with error_codes['usage']'''
    log(usage_message)
    if code is None:
        log(extended_message)
        code = 1
    sys.exit(code)


def main(argv):

    short_opts = 'ho:A'
    long_opts = [
        'help', 'output=', 'ast'
    ]

    try:
        opts, args = getopt.getopt(argv, short_opts, long_opts)
    except getopt.GetoptError, err:
        log(err)
        usage(1)

    output = None
    ast = False
    inputs = args
    for opt, arg in opts:
        if opt in ('-h', '--help',):
            usage()
        elif opt in ('-o', '--output',):
            output = arg
        elif opt in ('-A', '--ast'):
            ast = True
        else:
            log("Unkown option", opt)
            usage(1)

    if not ast:
        log("For this version of arrowc (pr03) you can only use the -A or --ast option")
        usage(1)

    if not inputs:
        log("You must supply some inputs")
        usage(1)


    ast = ""
    for input in inputs:
        try:
            with open(input, 'r') as input_file:
                program = input_file.read()
                try:
                    al_parser = ArrowParser()
                    ast += str(al_parser.parse(program, lexer=ArrowLexer()))
                except SyntaxError, e:
                    log("Error in %s: %s" % (input, e))
        except IOError:
            log("Error reading file: " + input)


    with open(output, 'w') as out:
        out.write(ast)


    # test_input = ''.join(sys.stdin.readlines())
    # al_lexer = arrowlang_lexer.ArrowLexer()
    # al_lexer.build()
    #
    # al_parser = arrowlang_parser.ArrowParser()
    # al_parser.build()
    # ast = al_parser.yacc.parse(test_input, lexer=al_lexer.lexer)





if __name__ == "__main__":
    main(sys.argv[1:])
